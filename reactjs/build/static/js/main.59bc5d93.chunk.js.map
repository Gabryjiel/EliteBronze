{"version":3,"sources":["components/Header/index.js","utilities/useFetch.js","components/Tournaments/TournamentList.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","history","useHistory","goTo","path","push","className","onClick","useFetch","url","options","defaultValue","useState","data","setData","useEffect","a","fetch","then","response","json","console","log","fetchData","TournamentList","style","height","map","el","key","name","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uQAKe,SAASA,EAAQC,GAE5B,IAAMC,EAAUC,cAEVC,EAAO,SAAAC,GACTH,EAAQI,KAAKD,IAGjB,OACI,wBAAIE,UAAU,UACV,wBAAIA,UAAU,cAAcC,QAAS,kBAAMJ,EAAK,OAAhD,QACA,wBAAIG,UAAU,qBACd,wBAAIA,UAAU,cAAcC,QAAS,kBAAMJ,EAAK,kBAAhD,YACA,wBAAIG,UAAU,cAAcC,QAAS,kBAAMJ,EAAK,YAAhD,cACA,wBAAIG,UAAU,cAAcC,QAAS,kBAAMJ,EAAK,cAAhD,W,qCCCGK,EAlBE,SAACC,EAAKC,GAAkC,IAAzBC,EAAwB,uDAAT,KAAS,EAC5BC,mBAASD,GADmB,mBAC7CE,EAD6C,KACvCC,EADuC,KAepD,OAZAC,qBAAU,YACS,uCAAG,sBAAAC,EAAA,sDACdC,MAAM,6BAAD,OAA8BR,IAC9BS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACFE,QAAQC,IAAIH,GACZL,EAAQK,MALF,2CAAH,qDAQfI,KACD,CAACd,IAEG,CAAEI,SCdE,SAASW,EAAexB,GAAO,IAElCa,EAASL,EAAS,cAAe,KAAM,IAAvCK,KAER,OACI,yBAAKY,MAAO,CAACC,OAAQ,UAChBb,EAAKc,KAAI,SAAAC,GACN,OAAO,wBAAIC,IAAKD,EAAGE,MAAOF,EAAGE,U,iBCkB9BC,EAnBH,SAAA/B,GAEV,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MAEA,yBAAKM,UAAU,YACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO0B,OAAK,EAAC5B,KAAK,MAClB,kBAAC,IAAD,CAAO4B,OAAK,EAAC5B,KAAK,eAAe6B,UAAWT,IAC5C,kBAAC,IAAD,CAAOpB,KAAK,WACZ,kBAAC,IAAD,CAAOA,KAAK,iBCRJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.59bc5d93.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport \"./Header.css\"\r\n\r\nexport default function Header (props){\r\n\r\n    const history = useHistory();\r\n\r\n    const goTo = path => {\r\n        history.push(path);\r\n    }\r\n\r\n    return(\r\n        <ul className=\"header\">\r\n            <li className=\"header-item\" onClick={() => goTo('/')}>Home</li>\r\n            <li className=\"header-item-grow\"></li>\r\n            <li className=\"header-item\" onClick={() => goTo(\"/tournaments\")}>Turnieje</li>\r\n            <li className=\"header-item\" onClick={() => goTo('/stats')}>Statystyki</li>\r\n            <li className=\"header-item\" onClick={() => goTo('/profile')}>Profil</li>\r\n        </ul>\r\n    )\r\n}","import { useState, useEffect } from \"react\";\r\n\r\nconst useFetch = (url, options, defaultValue = null) => {\r\n    const [data, setData] = useState(defaultValue);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            fetch(`http://localhost:3001/api/${url}`)\r\n                .then(response => response.json())\r\n                .then(response => {\r\n                    console.log(response)\r\n                    setData(response);\r\n                })\r\n        }\r\n        fetchData();\r\n    }, [url])\r\n\r\n    return { data };\r\n}\r\n\r\nexport default useFetch;","import React from \"react\";\r\nimport useFetch from \"../../utilities/useFetch\";\r\n\r\nexport default function TournamentList(props){\r\n\r\n    const { data } = useFetch('tournaments', null, []);\r\n\r\n    return (\r\n        <div style={{height: \"300px\"}}>\r\n            {data.map(el => {\r\n                return <li key={el.name}>{el.name}</li>\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nimport Header from \"./components/Header\";\r\n\r\nimport TournamentList from \"./components/Tournaments/TournamentList.js\";\r\n\r\nimport \"./css/App.css\";\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\n\r\nconst App = props => {\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Header />\r\n      \r\n      <div className=\"app_main\">\r\n        <Switch>\r\n            <Route exact path=\"/\"></Route>\r\n            <Route exact path=\"/tournaments\" component={TournamentList} />\r\n            <Route path=\"/stats\"></Route>\r\n            <Route path=\"/profile\"></Route>\r\n\r\n        </Switch>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}